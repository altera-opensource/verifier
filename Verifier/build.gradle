/*
 * This project is licensed as below.
 *
 * **************************************************************************
 *
 * Copyright 2020-2023 Intel Corporation. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * **************************************************************************
 *
 */

plugins {
    alias(libs.plugins.lombok)
    alias(libs.plugins.gradle.versions)
    alias(libs.plugins.modernizer)
    alias(libs.plugins.sqlite)
    id 'java-library'
    id 'idea'
}

apply from: rootProject.file('gradle/common.gradle')

def buildVersion = ext.getBuildVersion()

configurations {
    fatjar {
        extendsFrom implementation
    }
}

jar {
    dependsOn configurations.fatjar
    archiveBaseName.set('Verifier')
    archiveVersion.set(buildVersion)
    manifest {
        attributes(
            'Sealed': 'true',
            'Implementation-Title': 'Intel FPGA Attestation Verifier library',
            'Implementation-Version': buildVersion
        )
    }
    from {
        configurations.fatjar.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = 'com.intel.bkp'
version = buildVersion

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}


configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    setTestClassesDirs(sourceSets.integrationTest.output.getClassesDirs())
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

test {
    useJUnitPlatform()
}

dependencies {
    implementation project(':Utils')
    implementation project(':CryptoCore')
    implementation project(':fpgaCertCore')
    implementation project(':ServiceCore')

    implementation libs.jna
    implementation libs.apache.commons.dbutils
    implementation libs.slf4j.api
    implementation libs.jackson.databind
    implementation libs.sqlite.jdbc
    implementation libs.bouncycastle

    testImplementation platform(libs.junit.bom)
    testImplementation libs.junit.jupiter
    testImplementation libs.bundles.mockito
    testImplementation libs.bundles.logback
    testImplementation libs.jazzer.junit

    integrationTestImplementation libs.jazzer.junit
}

task createSqliteDatabase {
    def databaseFile = file("${projectDir}/src/main/resources/verifier_core.sqlite")

    outputs.file databaseFile

    doLast {
        openSQLiteDatabase(databaseFile)
    }
}

task deploy(dependsOn: jar, type: Copy) {
    from layout.buildDirectory.dir("${buildDir}/libs"), layout.buildDirectory.dir("${buildDir}/resources/main"), "${projectDir}/../spdm_wrapper/build/Release"
    include "*.jar", "config.properties", "libspdm_wrapper.so", "libspdm_wrapper.dll"
    into "${projectDir}/../out"
}

compileJava.dependsOn createSqliteDatabase
processResources.dependsOn createSqliteDatabase

task copyJarToOtherProjects {
    copy {
        from layout.buildDirectory.dir("${buildDir}/libs")
        into "${projectDir}/../workload/libs/"
    }
}
