/*
 * This project is licensed as below.
 *
 * **************************************************************************
 *
 * Copyright 2020-2022 Intel Corporation. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * **************************************************************************
 *
 */

plugins {
    id 'java-library'
    id 'idea'
}


def buildVersion = getBuildVersion()

jar {
    archiveBaseName.set('fpgaCertCore')
    archiveVersion.set(buildVersion)
    manifest {
        attributes(
            'Sealed': 'true',
            'Implementation-Title': 'Intel FPGA Certificate Core library',
            'Implementation-Version': buildVersion
        )
    }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = 'com.intel.bkp'
version = buildVersion

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation project(':CryptoCore')
    implementation project(':Utils')

    implementation "org.apache.commons:commons-lang3:${commons_lang3_version}"
    implementation "org.slf4j:slf4j-api:${slf4j_version}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${bouncycastle_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit5_version}"
    testImplementation "org.mockito:mockito-inline:${mockito_version}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockito_version}"
    testImplementation "org.junit.platform:junit-platform-launcher:${junit5_platform_version}"
    testImplementation "ch.qos.logback:logback-classic:${logback_version}"
    testImplementation "ch.qos.logback:logback-core:${logback_version}"
    testImplementation "com.github.valfirst:slf4j-test:${slf4j_test_version}"
}

def getBuildVersion() {
    return file("${projectDir}/version").text.trim()
}
